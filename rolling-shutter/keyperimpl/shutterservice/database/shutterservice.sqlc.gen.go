// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: shutterservice.sql

package database

import (
	"context"
)

const getCurrentDecryptionTrigger = `-- name: GetCurrentDecryptionTrigger :one
SELECT eon, triggered_block_number, identities_hash FROM current_decryption_trigger
WHERE eon = $1
`

func (q *Queries) GetCurrentDecryptionTrigger(ctx context.Context, eon int64) (CurrentDecryptionTrigger, error) {
	row := q.db.QueryRow(ctx, getCurrentDecryptionTrigger, eon)
	var i CurrentDecryptionTrigger
	err := row.Scan(&i.Eon, &i.TriggeredBlockNumber, &i.IdentitiesHash)
	return i, err
}

const getDecryptionSignatures = `-- name: GetDecryptionSignatures :many
SELECT eon, keyper_index, identities_hash, signature FROM decryption_signatures
WHERE eon = $1 AND identities_hash = $2
ORDER BY keyper_index ASC
LIMIT $3
`

type GetDecryptionSignaturesParams struct {
	Eon            int64
	IdentitiesHash []byte
	Limit          int32
}

func (q *Queries) GetDecryptionSignatures(ctx context.Context, arg GetDecryptionSignaturesParams) ([]DecryptionSignature, error) {
	rows, err := q.db.Query(ctx, getDecryptionSignatures, arg.Eon, arg.IdentitiesHash, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DecryptionSignature
	for rows.Next() {
		var i DecryptionSignature
		if err := rows.Scan(
			&i.Eon,
			&i.KeyperIndex,
			&i.IdentitiesHash,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityRegisteredEventsSyncedUntil = `-- name: GetIdentityRegisteredEventsSyncedUntil :one
SELECT enforce_one_row, block_hash, block_number FROM identity_registered_events_synced_until LIMIT 1
`

func (q *Queries) GetIdentityRegisteredEventsSyncedUntil(ctx context.Context) (IdentityRegisteredEventsSyncedUntil, error) {
	row := q.db.QueryRow(ctx, getIdentityRegisteredEventsSyncedUntil)
	var i IdentityRegisteredEventsSyncedUntil
	err := row.Scan(&i.EnforceOneRow, &i.BlockHash, &i.BlockNumber)
	return i, err
}

const getNotDecryptedIdentityRegisteredEvents = `-- name: GetNotDecryptedIdentityRegisteredEvents :many
SELECT index, block_number, block_hash, tx_index, log_index, eon, identity_prefix, sender, timestamp, decrypted FROM identity_registered_event
WHERE timestamp >= $1 AND timestamp <= $2
ORDER BY index ASC
`

type GetNotDecryptedIdentityRegisteredEventsParams struct {
	Timestamp   int64
	Timestamp_2 int64
}

func (q *Queries) GetNotDecryptedIdentityRegisteredEvents(ctx context.Context, arg GetNotDecryptedIdentityRegisteredEventsParams) ([]IdentityRegisteredEvent, error) {
	rows, err := q.db.Query(ctx, getNotDecryptedIdentityRegisteredEvents, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IdentityRegisteredEvent
	for rows.Next() {
		var i IdentityRegisteredEvent
		if err := rows.Scan(
			&i.Index,
			&i.BlockNumber,
			&i.BlockHash,
			&i.TxIndex,
			&i.LogIndex,
			&i.Eon,
			&i.IdentityPrefix,
			&i.Sender,
			&i.Timestamp,
			&i.Decrypted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDecryptionSignature = `-- name: InsertDecryptionSignature :exec
INSERT INTO decryption_signatures (eon, keyper_index, identities_hash, signature)
VALUES ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
`

type InsertDecryptionSignatureParams struct {
	Eon            int64
	KeyperIndex    int64
	IdentitiesHash []byte
	Signature      []byte
}

func (q *Queries) InsertDecryptionSignature(ctx context.Context, arg InsertDecryptionSignatureParams) error {
	_, err := q.db.Exec(ctx, insertDecryptionSignature,
		arg.Eon,
		arg.KeyperIndex,
		arg.IdentitiesHash,
		arg.Signature,
	)
	return err
}

const setCurrentDecryptionTrigger = `-- name: SetCurrentDecryptionTrigger :exec
INSERT INTO current_decryption_trigger (eon, triggered_block_number, identities_hash)
VALUES ($1, $2, $3)
ON CONFLICT (eon, triggered_block_number) DO UPDATE
SET triggered_block_number = $2, identities_hash = $3
`

type SetCurrentDecryptionTriggerParams struct {
	Eon                  int64
	TriggeredBlockNumber int64
	IdentitiesHash       []byte
}

func (q *Queries) SetCurrentDecryptionTrigger(ctx context.Context, arg SetCurrentDecryptionTriggerParams) error {
	_, err := q.db.Exec(ctx, setCurrentDecryptionTrigger, arg.Eon, arg.TriggeredBlockNumber, arg.IdentitiesHash)
	return err
}

const updateDecryptedFlag = `-- name: UpdateDecryptedFlag :exec
UPDATE identity_registered_event
SET decrypted = TRUE
WHERE (eon, identity_prefix) IN (
    SELECT UNNEST($1::bigint[]), UNNEST($2::bytea[])
)
`

type UpdateDecryptedFlagParams struct {
	Column1 []int64
	Column2 [][]byte
}

func (q *Queries) UpdateDecryptedFlag(ctx context.Context, arg UpdateDecryptedFlagParams) error {
	_, err := q.db.Exec(ctx, updateDecryptedFlag, arg.Column1, arg.Column2)
	return err
}
