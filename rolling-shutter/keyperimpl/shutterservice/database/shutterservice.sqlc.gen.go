// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: shutterservice.sql

package database

import (
	"context"
)

const getIdentityRegisteredEventsSyncedUntil = `-- name: GetIdentityRegisteredEventsSyncedUntil :one
SELECT enforce_one_row, block_hash, block_number, slot FROM identity_registered_events_synced_until LIMIT 1
`

func (q *Queries) GetIdentityRegisteredEventsSyncedUntil(ctx context.Context) (IdentityRegisteredEventsSyncedUntil, error) {
	row := q.db.QueryRow(ctx, getIdentityRegisteredEventsSyncedUntil)
	var i IdentityRegisteredEventsSyncedUntil
	err := row.Scan(
		&i.EnforceOneRow,
		&i.BlockHash,
		&i.BlockNumber,
		&i.Slot,
	)
	return i, err
}

const getNotDecryptedIdentityRegisteredEvents = `-- name: GetNotDecryptedIdentityRegisteredEvents :many
SELECT index, block_number, block_hash, tx_index, log_index, eon, identity_prefix, sender, timestamp, decrypted FROM identity_registered_event
WHERE timestamp >= $1
ORDER BY index ASC
`

func (q *Queries) GetNotDecryptedIdentityRegisteredEvents(ctx context.Context, timestamp int64) ([]IdentityRegisteredEvent, error) {
	rows, err := q.db.Query(ctx, getNotDecryptedIdentityRegisteredEvents, timestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IdentityRegisteredEvent
	for rows.Next() {
		var i IdentityRegisteredEvent
		if err := rows.Scan(
			&i.Index,
			&i.BlockNumber,
			&i.BlockHash,
			&i.TxIndex,
			&i.LogIndex,
			&i.Eon,
			&i.IdentityPrefix,
			&i.Sender,
			&i.Timestamp,
			&i.Decrypted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
