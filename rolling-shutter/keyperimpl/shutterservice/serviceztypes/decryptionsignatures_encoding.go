// Code generated by fastssz. DO NOT EDIT.
// Hash: 973342b9289c47c0c9c566554c5f8daf293432fc59f725ca65360b268abb8aaf
// Version: 0.1.4
package serviceztypes

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the IdentityPreimage object
func (i *IdentityPreimage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the IdentityPreimage object to a target array
func (i *IdentityPreimage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Bytes'
	if size := len(i.Bytes); size != 52 {
		err = ssz.ErrBytesLengthFn("IdentityPreimage.Bytes", size, 52)
		return
	}
	dst = append(dst, i.Bytes...)

	return
}

// UnmarshalSSZ ssz unmarshals the IdentityPreimage object
func (i *IdentityPreimage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 52 {
		return ssz.ErrSize
	}

	// Field (0) 'Bytes'
	if cap(i.Bytes) == 0 {
		i.Bytes = make([]byte, 0, len(buf[0:52]))
	}
	i.Bytes = append(i.Bytes, buf[0:52]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the IdentityPreimage object
func (i *IdentityPreimage) SizeSSZ() (size int) {
	size = 52
	return
}

// HashTreeRoot ssz hashes the IdentityPreimage object
func (i *IdentityPreimage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the IdentityPreimage object with a hasher
func (i *IdentityPreimage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Bytes'
	if size := len(i.Bytes); size != 52 {
		err = ssz.ErrBytesLengthFn("IdentityPreimage.Bytes", size, 52)
		return
	}
	hh.PutBytes(i.Bytes)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the IdentityPreimage object
func (i *IdentityPreimage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}

// MarshalSSZ ssz marshals the DecryptionSignatureData object
func (d *DecryptionSignatureData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DecryptionSignatureData object to a target array
func (d *DecryptionSignatureData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Field (0) 'InstanceID'
	dst = ssz.MarshalUint64(dst, d.InstanceID)

	// Field (1) 'Eon'
	dst = ssz.MarshalUint64(dst, d.Eon)

	// Offset (2) 'IdentityPreimages'
	dst = ssz.WriteOffset(dst, offset)

	// Field (2) 'IdentityPreimages'
	if size := len(d.IdentityPreimages); size > 1024 {
		err = ssz.ErrListTooBigFn("DecryptionSignatureData.IdentityPreimages", size, 1024)
		return
	}
	for ii := 0; ii < len(d.IdentityPreimages); ii++ {
		if dst, err = d.IdentityPreimages[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the DecryptionSignatureData object
func (d *DecryptionSignatureData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'InstanceID'
	d.InstanceID = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Eon'
	d.Eon = ssz.UnmarshallUint64(buf[8:16])

	// Offset (2) 'IdentityPreimages'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 != 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'IdentityPreimages'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 52, 1024)
		if err != nil {
			return err
		}
		d.IdentityPreimages = make([]IdentityPreimage, num)
		for ii := 0; ii < num; ii++ {
			if err = d.IdentityPreimages[ii].UnmarshalSSZ(buf[ii*52 : (ii+1)*52]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DecryptionSignatureData object
func (d *DecryptionSignatureData) SizeSSZ() (size int) {
	size = 20

	// Field (2) 'IdentityPreimages'
	size += len(d.IdentityPreimages) * 52

	return
}

// HashTreeRoot ssz hashes the DecryptionSignatureData object
func (d *DecryptionSignatureData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DecryptionSignatureData object with a hasher
func (d *DecryptionSignatureData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'InstanceID'
	hh.PutUint64(d.InstanceID)

	// Field (1) 'Eon'
	hh.PutUint64(d.Eon)

	// Field (2) 'IdentityPreimages'
	{
		subIndx := hh.Index()
		num := uint64(len(d.IdentityPreimages))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range d.IdentityPreimages {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the DecryptionSignatureData object
func (d *DecryptionSignatureData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}
